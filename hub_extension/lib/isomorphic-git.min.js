/**
 * Simplified isomorphic-git implementation for Chrome Extension
 * This provides minimal functionality needed for GitHub repository access
 * For a full implementation, download from: https://unpkg.com/isomorphic-git/dist/bundle.umd.min.js
 */
(function(global) {
  'use strict';
  
  // Main git object
  const git = {
    // Simple clone function - for Chrome extension, we'll use a different approach
    // than actual git cloning since we're limited by browser environment
    clone: async function({ fs, http, dir, url, depth = 1, singleBranch = true }) {
      console.log(`[isomorphic-git] Clone requested: ${url} into ${dir}`);
      
      // Extract owner and repo name from GitHub URL
      const match = url.match(/github\.com\/([^\/]+)\/([^\/\.]+)/);
      if (!match) {
        throw new Error('Only GitHub repositories are supported');
      }
      
      const [, owner, repo] = match;
      
      try {
        // Create the directory
        await fs.promises.mkdir(dir, { recursive: true });
        
        // Fetch repository metadata
        const response = await fetch(`https://api.github.com/repos/${owner}/${repo}`);
        if (!response.ok) {
          throw new Error(`Failed to fetch repository info: ${response.statusText}`);
        }
        
        const repoInfo = await response.json();
        
        // Write basic git info
        await fs.promises.writeFile(
          `${dir}/.git/config`, 
          `[core]\n\trepositoryformatversion = 0\n\tfilemode = true\n\tbare = false\n[remote "origin"]\n\turl = ${url}\n`
        );
        
        return {
          defaultBranch: repoInfo.default_branch,
          fetchHead: repoInfo.default_branch,
          fetchHeadDescription: `branch '${repoInfo.default_branch}' of ${url}`
        };
      } catch (error) {
        console.error('[isomorphic-git] Clone error:', error);
        throw error;
      }
    },
    
    // List files in repository
    listFiles: async function({ fs, dir }) {
      try {
        const files = [];
        const readDir = async (path) => {
          const entries = await fs.promises.readdir(path, { withFileTypes: true });
          for (const entry of entries) {
            const fullPath = `${path}/${entry.name}`;
            if (entry.isDirectory()) {
              await readDir(fullPath);
            } else {
              files.push(fullPath.replace(`${dir}/`, ''));
            }
          }
        };
        
        await readDir(dir);
        return files;
      } catch (error) {
        console.error('[isomorphic-git] List files error:', error);
        throw error;
      }
    },
    
    // Check if path exists and is a certain type
    checkout: async function({ fs, dir, ref = 'HEAD' }) {
      console.log(`[isomorphic-git] Checkout requested: ${ref} in ${dir}`);
      // This is a simplified version that doesn't do anything in our case
      return { filesCheckedOut: 0 };
    }
  };
  
  // Additional utility for GitHub API
  git.utils = {
    // Fetch structure of a GitHub repository
    fetchRepoStructure: async function(owner, repo, branch = 'main') {
      try {
        const response = await fetch(`https://api.github.com/repos/${owner}/${repo}/git/trees/${branch}?recursive=1`);
        if (!response.ok) {
          throw new Error(`Failed to fetch repository structure: ${response.statusText}`);
        }
        
        const data = await response.json();
        return data.tree;
      } catch (error) {
        console.error('[isomorphic-git] Fetch repo structure error:', error);
        throw error;
      }
    },
    
    // Download a specific file from GitHub
    fetchRepoFile: async function(owner, repo, path, branch = 'main') {
      try {
        const response = await fetch(`https://raw.githubusercontent.com/${owner}/${repo}/${branch}/${path}`);
        if (!response.ok) {
          throw new Error(`Failed to fetch file ${path}: ${response.statusText}`);
        }
        
        return await response.text();
      } catch (error) {
        console.error('[isomorphic-git] Fetch file error:', error);
        throw error;
      }
    }
  };
  
  // Export to global scope
  global.git = git;
  
})(typeof window !== 'undefined' ? window : this);